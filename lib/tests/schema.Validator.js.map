{"version":3,"sources":["../../src/tests/schema.Validator.js"],"names":["assert","exports","throws","validator","Validator","Environment","validateAsync","then","result","fail","type","equal","catch","error","message","JSON","parse","stringify","Date","undefined","model","name","label","description","version","properties","class","object","firstName","decorators","config"],"mappings":"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","file":"schema.Validator.js","sourcesContent":["import \"babel-polyfill\";\nimport * as assert from \"assert\";\nimport Validator from \"../schema/Validator\";\nimport Environment from \"./mock/Environment\";\n\nexports[\"schema.Validate: No environment.\"] = () => {\n    assert.throws(() => {\n        const validator = new Validator();\n    }, \"Expected to throw because there wasn't an environment.\")\n}\n\nexports[\"schema.Validate: Invalid environment.\"] = () => {\n    assert.throws(() => {\n        const validator = new Validator({});\n    }, \"Expected to throw because the environment was invalid.\")\n}\n\nexports[\"schema.Validate: Invalid schema.\"] = () => {\n    const validator = new Validator(new Environment());\n    validator.validateAsync(null, {}).then((result)=>{\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    });\n}\n\nexports[\"schema.Validate: String (Long Hand).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync({ type: \"string\" }, \"String\").then((result) => {\n        assert.equal(result, true);\n    });\n}\n\nexports[\"schema.Validate: String (Short Hand).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"string\", \"String\").then((result) => {\n        assert.equal(result, true);\n    });\n}\n\nexports[\"schema.Validate: String (Bad Value).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"string\", 0).then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected a string.\");\n    });\n}\n\nexports[\"schema.Validate: Date (Long Hand).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"date\", JSON.parse(JSON.stringify(new Date()))).then((result) => {\n        assert.equal(result, true);\n    });\n}\n\nexports[\"schema.Validate: Date (Short Hand).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"date\", JSON.parse(JSON.stringify(new Date()))).then((result) => {\n        assert.equal(result, true);\n    });\n}\n\nexports[\"schema.Validate: Date (Bad Value).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"date\", \"\").then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected a date.\");\n    });\n}\n\nexports[\"schema.Validate: Boolean (Long Hand).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"boolean\", false).then((result) => {\n        assert.equal(result, true);\n    });\n}\n\nexports[\"schema.Validate: Boolean (Short Hand).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"boolean\", true).then((result) => {\n        assert.equal(result, true);\n    });\n}\n\nexports[\"schema.Validate: Boolean (Bad Value).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"boolean\", \"\").then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected a boolean.\");\n    });\n}\n\nexports[\"schema.Validate: Number (Long Hand).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"number\", 2).then((result) => {\n        assert.equal(result, true);\n    });\n}\n\nexports[\"schema.Validate: Number (Short Hand).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"number\", 1).then((result) => {\n        assert.equal(result, true);\n    });\n}\n\nexports[\"schema.Validate: Number (Bad Value).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"number\", \"\").then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected a number.\");\n    });\n}\n\nexports[\"schema.Validate: Any (Long Hand).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"any\", 2).then((result) => {\n        assert.equal(result, true);\n    });\n}\n\nexports[\"schema.Validate: Any (Short Hand).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"any\", {}).then((result) => {\n        assert.equal(result, true);\n    });\n}\n\nexports[\"schema.Validate: Any (Bad Value).\"] = () => {\n    const validator = new Validator(new Environment());\n\n    return validator.validateAsync(\"any\", undefined).then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Type any cannot be undefined.\");\n    });\n}\n\nexports[\"schema.Validate: Class.\"] = () => {\n    const validator = new Validator(new Environment());\n    const model = {\n        type: \"class\",\n        name: \"Person\",\n        label: \"Person\",\n        description: \"A Human.\",\n        version: \"1.0.0\",\n        properties: [\n            {\n                class: \"string\",\n                name: \"firstName\",\n                label: \"FirstName\"\n            }\n        ]\n    };\n\n    const object = {\n        firstName: \"John\"\n    };\n\n    return validator.validateAsync(model, object).then((result) => {\n        assert.equal(result, true);\n    });\n}\n\nexports[\"schema.Validate: Class with no name.\"] = () => {\n    const validator = new Validator(new Environment());\n    const model = {\n        type: \"class\"\n    };\n\n    const object = {\n        firstName: \"John\"\n    };\n\n    return validator.validateAsync(model, object).then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected the name of a class to be a string.\");\n    });\n}\n\nexports[\"schema.Validate: Class with no label.\"] = () => {\n    const validator = new Validator(new Environment());\n    const model = {\n        type: \"class\",\n        name: \"Person\"\n    };\n\n    const object = {\n        firstName: \"John\"\n    };\n\n    return validator.validateAsync(model, object).then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected the label of a class to be a string.\");\n    });\n}\n\nexports[\"schema.Validate: Class with no description.\"] = () => {\n    const validator = new Validator(new Environment());\n    const model = {\n        type: \"class\",\n        name: \"Person\",\n        label: \"Person\"\n    };\n\n    const object = {\n        firstName: \"John\"\n    };\n\n    return validator.validateAsync(model, object).then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected the description of a class to be a string.\");\n    });\n}\n\nexports[\"schema.Validate: Class with no version.\"] = () => {\n    const validator = new Validator(new Environment());\n    const model = {\n        type: \"class\",\n        name: \"Person\",\n        label: \"Person\",\n        description: \"A Human\"\n    };\n\n    const object = {\n        firstName: \"John\"\n    };\n\n    return validator.validateAsync(model, object).then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected the version of a class to be a string.\");\n    });\n}\n\nexports[\"schema.Validate: Class with invalid decorators property.\"] = () => {\n    const validator = new Validator(new Environment());\n    const model = {\n        type: \"class\",\n        name: \"Person\",\n        label: \"Person\",\n        description: \"A Human\",\n        version: \"1.0.0\",\n        decorators: 0\n    };\n\n    const object = {\n        firstName: \"John\"\n    };\n\n    return validator.validateAsync(model, object).then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected the decorators of a class to be an array.\");\n    });\n}\n\nexports[\"schema.Validate: Class with invalid decorator (null).\"] = () => {\n    const validator = new Validator(new Environment());\n    const model = {\n        type: \"class\",\n        name: \"Person\",\n        label: \"Person\",\n        description: \"A Human\",\n        version: \"1.0.0\",\n        properties: [],\n        decorators: [\n            null\n        ]\n    };\n\n    const object = {\n        firstName: \"John\"\n    };\n\n    return validator.validateAsync(model, object).then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected the decorator to be an object.\");\n    });\n}\n\nexports[\"schema.Validate: Class with invalid decorator (no name).\"] = () => {\n    const validator = new Validator(new Environment());\n    const model = {\n        type: \"class\",\n        name: \"Person\",\n        label: \"Person\",\n        description: \"A Human\",\n        version: \"1.0.0\",\n        properties: [],\n        decorators: [\n            {}\n        ]\n    };\n\n    const object = {\n        firstName: \"John\"\n    };\n\n    return validator.validateAsync(model, object).then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected the decorator's name property to be a string.\");\n    });\n}\n\nexports[\"schema.Validate: Class with invalid properties.\"] = () => {\n    const validator = new Validator(new Environment());\n    const model = {\n        type: \"class\",\n        name: \"Person\",\n        label: \"Person\",\n        description: \"A Human\",\n        version: \"1.0.0\",\n        properties: 0\n    };\n\n    const object = {\n        firstName: \"John\"\n    };\n\n    return validator.validateAsync(model, object).then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected the properties to be an array.\");\n    });\n}\n\nexports[\"schema.Validate: Class with invalid decorator (invalid name).\"] = () => {\n    const validator = new Validator(new Environment());\n    const model = {\n        type: \"class\",\n        name: \"Person\",\n        label: \"Person\",\n        description: \"A Human\",\n        version: \"1.0.0\",\n        properties: [],\n        decorators: [\n            {\n                name: 0\n            }\n        ]\n    };\n\n    const object = {\n        firstName: \"John\"\n    };\n\n    return validator.validateAsync(model, object).then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected the decorator's name property to be a string.\");\n    });\n}\n\nexports[\"schema.Validate: Class with invalid decorator (invalid config).\"] = () => {\n    const validator = new Validator(new Environment());\n    const model = {\n        type: \"class\",\n        name: \"Person\",\n        label: \"Person\",\n        description: \"A Human\",\n        version: \"1.0.0\",\n        properties: [],\n        decorators: [\n            {\n                name: \"queryable\",\n                config: null\n            }\n        ]\n    };\n\n    const object = {\n        firstName: \"John\"\n    };\n\n    return validator.validateAsync(model, object).then((result) => {\n        assert.fail(result, false, \"Unexpected result\", \"=\");\n    }).catch((error) => {\n        assert.equal(error.message, \"Expected the decorator's config property to be an object.\");\n    });\n}\n\nexports[\"schema.Validate: Class with valid decorator.\"] = () => {\n    const validator = new Validator(new Environment());\n    const model = {\n        type: \"class\",\n        name: \"Person\",\n        label: \"Person\",\n        description: \"A Human\",\n        version: \"1.0.0\",\n        properties: [],\n        decorators: [\n            {\n                name: \"queryable\",\n                config: {}\n            }\n        ]\n    };\n\n    const object = {\n        firstName: \"John\"\n    };\n\n    return validator.validateAsync(model, object).then((result) => {\n        assert.equal(result, true);\n    });\n}"]}